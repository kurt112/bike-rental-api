type BikePicture {
    id: ID!
    pictureName: String,
}

type Bike {
    id: ID!
    brand: String
    createdAt: String
    updatedAt: String
    price: Float
    quantity: Int
    size: Int
    name: String,
    description: String,
    available: String,
    bikePictures: [BikePicture],
    assignedCustomer: Customer,
    code: String,
    status: Int,
    startBarrow: String,
    endBarrow: String,
    parentBike: Bike,
    longitude: String,
    latitude: String,
}

type User {
    id: ID!
    email: String
    firstName: String
    middleName: String
    lastName: String
    gender: String
    password: String
    birthdate: String
    userRole: String
    cellphone: String
    isAccountNotExpired: Boolean
    isAccountNotLocked: Boolean
    isCredentialNotExpired: Boolean
    isEnabled: Boolean
    createdAt: String
    updatedAt: String
    isRenting: Boolean
}

type Customer {
    id: ID!
    user: User
    toPay: Float
    isMember: Boolean
    lastBilled: String
    nextBilled: String
    createdAt: String
    updatedAt: String
    isActive: String
}

type Employee {
    id: ID!
    isActive:String,
    user: User
}

type Store {
    id: ID!
    bikes: [Bike]
    name: String
    longitude: String
    latitude: String
    radius: String
    scopeColor:String,
    scopeEdgeColor: String
}

type Notification {
    id: ID!,
    message: String,
    from: User,
    to: User,
    isRead: Boolean
    link: String,
    createdAt: String
}


type Query {
    bikes(search:String, page: Int, size: Int, status: Int): [Bike]
    bikeById(id:ID!): Bike
    stores(search:String, page: Int, size: Int, status: Int): [Store]
    storeById(id:ID!): Store
    customers(search:String, page: Int, size: Int, status: Int): [Customer]
    customerById(id:ID!):Customer
    employees(search:String, page: Int, size: Int, status: Int): [Employee]
    employeeById(id:ID!):Employee
    getBikeByCustomer(search:String, token: String):[Bike],
    getNotifications(size: Int, page: Int,token: String): [Notification]
}